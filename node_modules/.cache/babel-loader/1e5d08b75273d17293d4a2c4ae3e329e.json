{"ast":null,"code":"// import React, { useState, useEffect } from 'react'\n// // mi componente principal <Lista>\n// const Lista = () => {\n//     function handleAdd() {\n//         // add item\n//       }\n//   // guardo el estado list de valor inicial la lista que tengo\n//   const [list, setList] = useState([\n//     {\n//       id: 'one',\n//       name:'A las nueve',\n//       artista: 'NTVG',\n//       duracion: '3:24',\n//       votos: 4,\n//     },\n//     {\n//       id: 'two',\n//       name:'Maldicion',\n//       artista: 'Once tiros',\n//       duracion: '3:04',\n//       votos: 3,\n//     },\n//     {\n//       id: 'three',\n//       name: 'Cancion para uno',\n//       artista: 'La Vela Puerca',\n//       duracion: '2:53',\n//       votos: 2,\n//     },\n//     {\n//       id: 'four',\n//       name: 'Mi Revolucion',\n//       artista: 'Cuartro Pesos de Propina',\n//       duracion: '3:24',\n//       votos: 1,\n//     },\n//     {\n//       id: 'five',\n//       name: 'Lo mas simple de las cosas',\n//       artista: 'Hereford',\n//       duracion: '3:17',\n//       votos: 0,\n//     }\n//   ]);\n//   // utilizo useEffect para ejecutar este código sólo una vez\n//   useEffect(() => {\n//     // copio la lista con [...list] y la ordeno con sort()\n//     const sortedList = [...list].sort((b, a) => (a.votos > b.votos ? 1 : a.votos < b.votos ? -1 : 0))\n//     // actualizo el estado con la nueva lista ya ordenada\n//     setList(sortedList)\n//   }, [])\n//   // vuelco el contenido del estado `list`\n//   return (\n//     <>\n//       {/* Aquí pongo el botón para reordenar la lista */}\n//       <button\n//         onClick={() => {\n//           let newSortedList = [...list].sort((a, b) => (a.votos > b.votos ? 1 : a.votos < b.votos ? -1 : 0))\n//           // si la lista después de ordenarla tiene el mismo primer elemento, lo repito a la inversa\n//           // (claro que esto es ineficiente, lo suyo sería habilitar otro estado para guardar el tipo de ordenamiento que hemos hecho)\n//           if (newSortedList[0] === list[0])\n//             newSortedList = [...list].sort((b, a) => (a.votos > b.votos ? 1 : a.votos < b.votos ? -1 : 0))\n//           setList(newSortedList)\n//         }}\n//       >\n//         Ordenar\n//       </button>\n//       <button onClick={handleAdd}>\n//           Like\n//       </button>\n//       {/* Y aquí la lista, cada vez que el estado cambie este componente se va a repintar y a actualizar la vista */}\n//       <ul >\n//         {list.map(listas => ( \n//           <li key={listas.id}>\n//             {listas.name}   <br/> \n//             {listas.artista}  <br/>  \n//              {listas.votos} <br/>  \n//              <p></p>\n//              <p>{listas.id}</p>\n//           </li>\n//         ))}\n//       </ul>\n//     </>\n//   )\n// }\n// export default Lista","map":{"version":3,"sources":["/home/laboratorio1/Escritorio/maxi-app-mateify/src/components/listaprueba.js/lista.js"],"names":[],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React, { useState, useEffect } from 'react'\n\n// // mi componente principal <Lista>\n// const Lista = () => {\n//     function handleAdd() {\n//         // add item\n//       }\n     \n//   // guardo el estado list de valor inicial la lista que tengo\n//   const [list, setList] = useState([\n//     {\n//       id: 'one',\n//       name:'A las nueve',\n//       artista: 'NTVG',\n//       duracion: '3:24',\n//       votos: 4,\n//     },\n//     {\n//       id: 'two',\n//       name:'Maldicion',\n//       artista: 'Once tiros',\n//       duracion: '3:04',\n//       votos: 3,\n//     },\n//     {\n//       id: 'three',\n//       name: 'Cancion para uno',\n//       artista: 'La Vela Puerca',\n//       duracion: '2:53',\n//       votos: 2,\n//     },\n//     {\n//       id: 'four',\n//       name: 'Mi Revolucion',\n//       artista: 'Cuartro Pesos de Propina',\n//       duracion: '3:24',\n//       votos: 1,\n//     },\n//     {\n//       id: 'five',\n//       name: 'Lo mas simple de las cosas',\n//       artista: 'Hereford',\n//       duracion: '3:17',\n//       votos: 0,\n//     }\n    \n//   ]);\n\n//   // utilizo useEffect para ejecutar este código sólo una vez\n//   useEffect(() => {\n//     // copio la lista con [...list] y la ordeno con sort()\n//     const sortedList = [...list].sort((b, a) => (a.votos > b.votos ? 1 : a.votos < b.votos ? -1 : 0))\n//     // actualizo el estado con la nueva lista ya ordenada\n//     setList(sortedList)\n//   }, [])\n\n//   // vuelco el contenido del estado `list`\n//   return (\n//     <>\n//       {/* Aquí pongo el botón para reordenar la lista */}\n//       <button\n//         onClick={() => {\n//           let newSortedList = [...list].sort((a, b) => (a.votos > b.votos ? 1 : a.votos < b.votos ? -1 : 0))\n//           // si la lista después de ordenarla tiene el mismo primer elemento, lo repito a la inversa\n//           // (claro que esto es ineficiente, lo suyo sería habilitar otro estado para guardar el tipo de ordenamiento que hemos hecho)\n//           if (newSortedList[0] === list[0])\n//             newSortedList = [...list].sort((b, a) => (a.votos > b.votos ? 1 : a.votos < b.votos ? -1 : 0))\n//           setList(newSortedList)\n//         }}\n//       >\n//         Ordenar\n//       </button>\n\n//       <button onClick={handleAdd}>\n//           Like\n//       </button>\n\n//       {/* Y aquí la lista, cada vez que el estado cambie este componente se va a repintar y a actualizar la vista */}\n//       <ul >\n//         {list.map(listas => ( \n//           <li key={listas.id}>\n//             {listas.name}   <br/> \n//             {listas.artista}  <br/>  \n//              {listas.votos} <br/>  \n//              <p></p>\n//              <p>{listas.id}</p>\n\n//           </li>\n//         ))}\n//       </ul>\n//     </>\n//   )\n// }\n\n// export default Lista\n"]},"metadata":{},"sourceType":"module"}