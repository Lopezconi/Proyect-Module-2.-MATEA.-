{"ast":null,"code":"var _jsxFileName = \"/home/laboratorio1/Escritorio/maxi-app-mateify/src/components/listaprueba.js/lista.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// import React, { useState, useEffect } from 'react'\n// // mi componente principal <Lista>\n// const Lista = () => {\n//     const [votos, setVotos] = useState(0);\n//   // guardo el estado list de valor inicial la lista que tengo\n//   const [list, setList] = useState([\n//     {\n//       id: 'one',\n//       name:'A las nueve',\n//       artista: 'NTVG',\n//       duracion: '3:24',\n//       votos: 4,\n//     },\n//     {\n//       id: 'two',\n//       name:'Maldicion',\n//       artista: 'Once tiros',\n//       duracion: '3:04',\n//       votos: 3,\n//     },\n//     {\n//       id: 'three',\n//       name: 'Cancion para uno',\n//       artista: 'La Vela Puerca',\n//       duracion: '2:53',\n//       votos: 2,\n//     },\n//     {\n//       id: 'four',\n//       name: 'Mi Revolucion',\n//       artista: 'Cuartro Pesos de Propina',\n//       duracion: '3:24',\n//       votos: 1,\n//     },\n//     {\n//       id: 'five',\n//       name: 'Lo mas simple de las cosas',\n//       artista: 'Hereford',\n//       duracion: '3:17',\n//       votos: 0,\n//     }\n//   ]);\n//   // utilizo useEffect para ejecutar este código sólo una vez\n//   useEffect(() => {\n//     // copio la lista con [...list] y la ordeno con sort()\n//     const sortedList = [...list].sort((b, a) => (a.votos > b.votos ? 1 : a.votos < b.votos ? -1 : 0))\n//     // actualizo el estado con la nueva lista ya ordenada\n//     setList(sortedList)\n//   }, [])\n//   // vuelco el contenido del estado `list`\n//   return (\n//     <>\n//       {/* Aquí pongo el botón para reordenar la lista */}\n//       <button\n//         onClick={() => {\n//           let newSortedList = [...list].sort((a, b) => (a.votos > b.votos ? 1 : a.votos < b.votos ? -1 : 0))\n//           // si la lista después de ordenarla tiene el mismo primer elemento, lo repito a la inversa\n//           // (claro que esto es ineficiente, lo suyo sería habilitar otro estado para guardar el tipo de ordenamiento que hemos hecho)\n//           if (newSortedList[0] === list[0])\n//             newSortedList = [...list].sort((b, a) => (a.votos > b.votos ? 1 : a.votos < b.votos ? -1 : 0))\n//           setList(newSortedList)\n//         }}\n//       >\n//         Ordenar\n//       </button>\n//       <button onClick={() => setVotos(votos + 1)}>\n//           Like\n//       </button>\n//       {/* Y aquí la lista, cada vez que el estado cambie este componente se va a repintar y a actualizar la vista */}\n//       <ul >\n//         {list.map(listas => (\n//           <li>\n//             {listas.name}   <br/> \n//             {listas.artista}  <br/>  \n//              {listas.votos }<br/>  \n//              .\n//           </li>\n//         ))}\n//       </ul>\n//     </>\n//   )\n// }\n// export default Lista\nfunction Lista(props) {\n  const sidebar = /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: props.posts.map(post => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [\"          \", post.title]\n    }, post.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 26\n  }, this);\n\n  const content = props.posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"      \", /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 75\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: post.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this)]\n  }, post.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 50\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [sidebar, \"      \", /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 24\n    }, this), content, \"    \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 7\n  }, this);\n}\n\n_c = Lista;\nconst posts = [{\n  id: 1,\n  title: 'Hello World',\n  content: 'Welcome to learning React!'\n}, {\n  id: 2,\n  title: 'Installation',\n  content: 'You can install React from npm.'\n}];\nexport default Lista;\n\nvar _c;\n\n$RefreshReg$(_c, \"Lista\");","map":{"version":3,"sources":["/home/laboratorio1/Escritorio/maxi-app-mateify/src/components/listaprueba.js/lista.js"],"names":["Lista","props","sidebar","posts","map","post","title","id","content"],"mappings":";;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,SAASA,KAAT,CAAeC,KAAf,EAAsB;AAClB,QAAMC,OAAO,gBAAQ;AAAA,cAChBD,KAAK,CAACE,KAAN,CAAYC,GAAZ,CAAiBC,IAAD,iBACf;AAAA,+BAA6BA,IAAI,CAACC,KAAlC;AAAA,OAASD,IAAI,CAACE,EAAd;AAAA;AAAA;AAAA;AAAA,YADD;AADgB;AAAA;AAAA;AAAA;AAAA,UAArB;;AAOA,QAAMC,OAAO,GAAGP,KAAK,CAACE,KAAN,CAAYC,GAAZ,CAAiBC,IAAD,iBAAa;AAAA,sCAAyB;AAAA,gBAAKA,IAAI,CAACC;AAAV;AAAA;AAAA;AAAA;AAAA,YAAzB,eACzC;AAAA,gBAAID,IAAI,CAACG;AAAT;AAAA;AAAA;AAAA;AAAA,YADyC;AAAA,KAAUH,IAAI,CAACE,EAAf;AAAA;AAAA;AAAA;AAAA,UAA7B,CAAhB;AAIA,sBACE;AAAA,eACGL,OADH,yBACiB;AAAA;AAAA;AAAA;AAAA,YADjB,EAEGM,OAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;KAjBMR,K;AAmBP,MAAMG,KAAK,GAAG,CACZ;AAACI,EAAAA,EAAE,EAAE,CAAL;AAAQD,EAAAA,KAAK,EAAE,aAAf;AAA8BE,EAAAA,OAAO,EAAE;AAAvC,CADY,EAEZ;AAACD,EAAAA,EAAE,EAAE,CAAL;AAAQD,EAAAA,KAAK,EAAE,cAAf;AAA+BE,EAAAA,OAAO,EAAE;AAAxC,CAFY,CAAd;AAKA,eAAeR,KAAf","sourcesContent":["// import React, { useState, useEffect } from 'react'\n\n// // mi componente principal <Lista>\n// const Lista = () => {\n//     const [votos, setVotos] = useState(0);\n//   // guardo el estado list de valor inicial la lista que tengo\n//   const [list, setList] = useState([\n//     {\n//       id: 'one',\n//       name:'A las nueve',\n//       artista: 'NTVG',\n//       duracion: '3:24',\n//       votos: 4,\n//     },\n//     {\n//       id: 'two',\n//       name:'Maldicion',\n//       artista: 'Once tiros',\n//       duracion: '3:04',\n//       votos: 3,\n//     },\n//     {\n//       id: 'three',\n//       name: 'Cancion para uno',\n//       artista: 'La Vela Puerca',\n//       duracion: '2:53',\n//       votos: 2,\n//     },\n//     {\n//       id: 'four',\n//       name: 'Mi Revolucion',\n//       artista: 'Cuartro Pesos de Propina',\n//       duracion: '3:24',\n//       votos: 1,\n//     },\n//     {\n//       id: 'five',\n//       name: 'Lo mas simple de las cosas',\n//       artista: 'Hereford',\n//       duracion: '3:17',\n//       votos: 0,\n//     }\n    \n//   ]);\n\n//   // utilizo useEffect para ejecutar este código sólo una vez\n//   useEffect(() => {\n//     // copio la lista con [...list] y la ordeno con sort()\n//     const sortedList = [...list].sort((b, a) => (a.votos > b.votos ? 1 : a.votos < b.votos ? -1 : 0))\n//     // actualizo el estado con la nueva lista ya ordenada\n//     setList(sortedList)\n//   }, [])\n\n//   // vuelco el contenido del estado `list`\n//   return (\n//     <>\n//       {/* Aquí pongo el botón para reordenar la lista */}\n//       <button\n//         onClick={() => {\n//           let newSortedList = [...list].sort((a, b) => (a.votos > b.votos ? 1 : a.votos < b.votos ? -1 : 0))\n//           // si la lista después de ordenarla tiene el mismo primer elemento, lo repito a la inversa\n//           // (claro que esto es ineficiente, lo suyo sería habilitar otro estado para guardar el tipo de ordenamiento que hemos hecho)\n//           if (newSortedList[0] === list[0])\n//             newSortedList = [...list].sort((b, a) => (a.votos > b.votos ? 1 : a.votos < b.votos ? -1 : 0))\n//           setList(newSortedList)\n//         }}\n//       >\n//         Ordenar\n//       </button>\n\n//       <button onClick={() => setVotos(votos + 1)}>\n//           Like\n//       </button>\n\n//       {/* Y aquí la lista, cada vez que el estado cambie este componente se va a repintar y a actualizar la vista */}\n//       <ul >\n//         {list.map(listas => (\n//           <li>\n//             {listas.name}   <br/> \n//             {listas.artista}  <br/>  \n//              {listas.votos }<br/>  \n//              .\n\n//           </li>\n//         ))}\n//       </ul>\n//     </>\n//   )\n// }\n\n// export default Lista\nfunction Lista(props) {\n    const sidebar = (    <ul>\n        {props.posts.map((post) =>\n          <li key={post.id}>          {post.title}\n          </li>\n        )}\n      </ul>\n    );\n    const content = props.posts.map((post) =>    <div key={post.id}>      <h3>{post.title}</h3>\n        <p>{post.content}</p>\n      </div>\n    );\n    return (\n      <div>\n        {sidebar}      <hr />\n        {content}    </div>\n    );\n  }\n  \n  const posts = [\n    {id: 1, title: 'Hello World', content: 'Welcome to learning React!'},\n    {id: 2, title: 'Installation', content: 'You can install React from npm.'}\n  ];\n\n  export default Lista"]},"metadata":{},"sourceType":"module"}