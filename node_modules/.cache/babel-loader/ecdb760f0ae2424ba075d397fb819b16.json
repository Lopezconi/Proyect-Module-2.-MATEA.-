{"ast":null,"code":"var _jsxFileName = \"/home/laboratorio1/Escritorio/maxi-app-mateify/src/components/listaprueba.js/lista.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react'; // mi componente principal <Lista>\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Lista = () => {\n  _s();\n\n  // guardo el estado list de valor inicial la lista que tengo\n  const [list, setList] = useState([{\n    nombre: 'juan',\n    edad: 10\n  }, {\n    nombre: 'alberto',\n    edad: 40\n  }, {\n    nombre: 'aragor',\n    edad: 20\n  }]); // utilizo useEffect para ejecutar este código sólo una vez\n\n  useEffect(() => {\n    // copio la lista con [...list] y la ordeno con sort()\n    const sortedList = [...list].sort((a, b) => a.edad > b.edad ? 1 : a.edad < b.edad ? -1 : 0); // actualizo el estado con la nueva lista ya ordenada\n\n    setList(sortedList);\n  }, []); // vuelco el contenido del estado `list`\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        let newSortedList = [...list].sort((a, b) => a.edad > b.edad ? 1 : a.edad < b.edad ? -1 : 0); // si la lista después de ordenarla tiene el mismo primer elemento, lo repito a la inversa\n        // (claro que esto es ineficiente, lo suyo sería habilitar otro estado para guardar el tipo de ordenamiento que hemos hecho)\n\n        if (newSortedList[0] === list[0]) newSortedList = [...list].sort((b, a) => a.edad > b.edad ? 1 : a.edad < b.edad ? -1 : 0);\n        setList(newSortedList);\n      },\n      children: \"Ordenar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: list.map(el => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [el.nombre, \": \", el.edad]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Lista, \"iYyvTRJ5tjTkkdlBLLkwVWqBv4g=\");\n\n_c = Lista;\nexport default Lista;\n\nvar _c;\n\n$RefreshReg$(_c, \"Lista\");","map":{"version":3,"sources":["/home/laboratorio1/Escritorio/maxi-app-mateify/src/components/listaprueba.js/lista.js"],"names":["React","useState","useEffect","Lista","list","setList","nombre","edad","sortedList","sort","a","b","newSortedList","map","el"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CAEA;;;;;AACA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAClB;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,CAC/B;AAAEK,IAAAA,MAAM,EAAE,MAAV;AAAkBC,IAAAA,IAAI,EAAE;AAAxB,GAD+B,EAE/B;AAAED,IAAAA,MAAM,EAAE,SAAV;AAAqBC,IAAAA,IAAI,EAAE;AAA3B,GAF+B,EAG/B;AAAED,IAAAA,MAAM,EAAE,QAAV;AAAoBC,IAAAA,IAAI,EAAE;AAA1B,GAH+B,CAAD,CAAhC,CAFkB,CAQlB;;AACAL,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMM,UAAU,GAAG,CAAC,GAAGJ,IAAJ,EAAUK,IAAV,CAAe,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACH,IAAF,GAASI,CAAC,CAACJ,IAAX,GAAkB,CAAlB,GAAsBG,CAAC,CAACH,IAAF,GAASI,CAAC,CAACJ,IAAX,GAAkB,CAAC,CAAnB,GAAuB,CAAvE,CAAnB,CAFc,CAGd;;AACAF,IAAAA,OAAO,CAACG,UAAD,CAAP;AACD,GALQ,EAKN,EALM,CAAT,CATkB,CAgBlB;;AACA,sBACE;AAAA,4BAEE;AACE,MAAA,OAAO,EAAE,MAAM;AACb,YAAII,aAAa,GAAG,CAAC,GAAGR,IAAJ,EAAUK,IAAV,CAAe,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACH,IAAF,GAASI,CAAC,CAACJ,IAAX,GAAkB,CAAlB,GAAsBG,CAAC,CAACH,IAAF,GAASI,CAAC,CAACJ,IAAX,GAAkB,CAAC,CAAnB,GAAuB,CAAvE,CAApB,CADa,CAEb;AACA;;AACA,YAAIK,aAAa,CAAC,CAAD,CAAb,KAAqBR,IAAI,CAAC,CAAD,CAA7B,EACEQ,aAAa,GAAG,CAAC,GAAGR,IAAJ,EAAUK,IAAV,CAAe,CAACE,CAAD,EAAID,CAAJ,KAAWA,CAAC,CAACH,IAAF,GAASI,CAAC,CAACJ,IAAX,GAAkB,CAAlB,GAAsBG,CAAC,CAACH,IAAF,GAASI,CAAC,CAACJ,IAAX,GAAkB,CAAC,CAAnB,GAAuB,CAAvE,CAAhB;AACFF,QAAAA,OAAO,CAACO,aAAD,CAAP;AACD,OARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAgBE;AAAA,gBACGR,IAAI,CAACS,GAAL,CAASC,EAAE,iBACV;AAAA,mBACGA,EAAE,CAACR,MADN,QACgBQ,EAAE,CAACP,IADnB;AAAA;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAhBF;AAAA,kBADF;AA0BD,CA3CD;;GAAMJ,K;;KAAAA,K;AA6CN,eAAeA,KAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\n\n// mi componente principal <Lista>\nconst Lista = () => {\n  // guardo el estado list de valor inicial la lista que tengo\n  const [list, setList] = useState([\n    { nombre: 'juan', edad: 10 },\n    { nombre: 'alberto', edad: 40 },\n    { nombre: 'aragor', edad: 20 },\n  ])\n\n  // utilizo useEffect para ejecutar este código sólo una vez\n  useEffect(() => {\n    // copio la lista con [...list] y la ordeno con sort()\n    const sortedList = [...list].sort((a, b) => (a.edad > b.edad ? 1 : a.edad < b.edad ? -1 : 0))\n    // actualizo el estado con la nueva lista ya ordenada\n    setList(sortedList)\n  }, [])\n\n  // vuelco el contenido del estado `list`\n  return (\n    <>\n      {/* Aquí pongo el botón para reordenar la lista */}\n      <button\n        onClick={() => {\n          let newSortedList = [...list].sort((a, b) => (a.edad > b.edad ? 1 : a.edad < b.edad ? -1 : 0))\n          // si la lista después de ordenarla tiene el mismo primer elemento, lo repito a la inversa\n          // (claro que esto es ineficiente, lo suyo sería habilitar otro estado para guardar el tipo de ordenamiento que hemos hecho)\n          if (newSortedList[0] === list[0])\n            newSortedList = [...list].sort((b, a) => (a.edad > b.edad ? 1 : a.edad < b.edad ? -1 : 0))\n          setList(newSortedList)\n        }}\n      >\n        Ordenar\n      </button>\n\n      {/* Y aquí la lista, cada vez que el estado cambie este componente se va a repintar y a actualizar la vista */}\n      <ul>\n        {list.map(el => (\n          <li>\n            {el.nombre}: {el.edad}\n          </li>\n        ))}\n      </ul>\n    </>\n  )\n}\n\nexport default Lista"]},"metadata":{},"sourceType":"module"}