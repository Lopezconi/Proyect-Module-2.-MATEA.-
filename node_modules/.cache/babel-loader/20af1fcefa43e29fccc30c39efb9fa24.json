{"ast":null,"code":"var _jsxFileName = \"/home/laboratorio1/Escritorio/maxi-app-mateify/src/components/listaprueba.js/lista.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react'; // mi componente principal <Lista>\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Lista = () => {\n  _s();\n\n  const [votos, setVotos] = useState(0); // guardo el estado list de valor inicial la lista que tengo\n\n  const [list, setList] = useState([{\n    id: 'one',\n    name: 'A las nueve',\n    artista: 'NTVG',\n    duracion: '3:24',\n    votos: 4\n  }, {\n    id: 'two',\n    name: 'Maldicion',\n    artista: 'Once tiros',\n    duracion: '3:04',\n    votos: 3\n  }, {\n    id: 'three',\n    name: 'Cancion para uno',\n    artista: 'La Vela Puerca',\n    duracion: '2:53',\n    votos: 2\n  }, {\n    id: 'four',\n    name: 'Mi Revolucion',\n    artista: 'Cuartro Pesos de Propina',\n    duracion: '3:24',\n    votos: 1\n  }, {\n    id: 'five',\n    name: 'Lo mas simple de las cosas',\n    artista: 'Hereford',\n    duracion: '3:17',\n    votos: 0\n  }]); // utilizo useEffect para ejecutar este código sólo una vez\n\n  useEffect(() => {\n    // copio la lista con [...list] y la ordeno con sort()\n    const sortedList = [...list].sort((b, a) => a.votos > b.votos ? 1 : a.votos < b.votos ? -1 : 0); // actualizo el estado con la nueva lista ya ordenada\n\n    setList(sortedList);\n  }, []); // vuelco el contenido del estado `list`\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        let newSortedList = [...list].sort((a, b) => a.votos > b.votos ? 1 : a.votos < b.votos ? -1 : 0); // si la lista después de ordenarla tiene el mismo primer elemento, lo repito a la inversa\n        // (claro que esto es ineficiente, lo suyo sería habilitar otro estado para guardar el tipo de ordenamiento que hemos hecho)\n\n        if (newSortedList[0] === list[0]) newSortedList = [...list].sort((b, a) => a.votos > b.votos ? 1 : a.votos < b.votos ? -1 : 0);\n        setList(newSortedList);\n      },\n      children: \"Ordenar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setVotos(votos + 1),\n      children: \"Like\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: list.map(el => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [el.name, \"   \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this), el.artista, \"  \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 27\n        }, this), el.votos, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this), \".\"]\n      }, list.votos, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Lista, \"wI5eUXnbpUFKP4Bwz3GhqNSkuxQ=\");\n\n_c = Lista;\nexport default Lista;\n\nvar _c;\n\n$RefreshReg$(_c, \"Lista\");","map":{"version":3,"sources":["/home/laboratorio1/Escritorio/maxi-app-mateify/src/components/listaprueba.js/lista.js"],"names":["React","useState","useEffect","Lista","votos","setVotos","list","setList","id","name","artista","duracion","sortedList","sort","b","a","newSortedList","map","el"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n\n// mi componente principal <Lista>\nconst Lista = () => {\n    const [votos, setVotos] = useState(0);\n  // guardo el estado list de valor inicial la lista que tengo\n  const [list, setList] = useState([\n    {\n      id: 'one',\n      name:'A las nueve',\n      artista: 'NTVG',\n      duracion: '3:24',\n      votos: 4,\n    },\n    {\n      id: 'two',\n      name:'Maldicion',\n      artista: 'Once tiros',\n      duracion: '3:04',\n      votos: 3,\n    },\n    {\n      id: 'three',\n      name: 'Cancion para uno',\n      artista: 'La Vela Puerca',\n      duracion: '2:53',\n      votos: 2,\n    },\n    {\n      id: 'four',\n      name: 'Mi Revolucion',\n      artista: 'Cuartro Pesos de Propina',\n      duracion: '3:24',\n      votos: 1,\n    },\n    {\n      id: 'five',\n      name: 'Lo mas simple de las cosas',\n      artista: 'Hereford',\n      duracion: '3:17',\n      votos: 0,\n    }\n    \n  ]);\n\n  // utilizo useEffect para ejecutar este código sólo una vez\n  useEffect(() => {\n    // copio la lista con [...list] y la ordeno con sort()\n    const sortedList = [...list].sort((b, a) => (a.votos > b.votos ? 1 : a.votos < b.votos ? -1 : 0))\n    // actualizo el estado con la nueva lista ya ordenada\n    setList(sortedList)\n  }, [])\n\n  // vuelco el contenido del estado `list`\n  return (\n    <>\n      {/* Aquí pongo el botón para reordenar la lista */}\n      <button\n        onClick={() => {\n          let newSortedList = [...list].sort((a, b) => (a.votos > b.votos ? 1 : a.votos < b.votos ? -1 : 0))\n          // si la lista después de ordenarla tiene el mismo primer elemento, lo repito a la inversa\n          // (claro que esto es ineficiente, lo suyo sería habilitar otro estado para guardar el tipo de ordenamiento que hemos hecho)\n          if (newSortedList[0] === list[0])\n            newSortedList = [...list].sort((b, a) => (a.votos > b.votos ? 1 : a.votos < b.votos ? -1 : 0))\n          setList(newSortedList)\n        }}\n      >\n        Ordenar\n      </button>\n\n      <button onClick={() => setVotos(votos + 1)}>\n          Like\n      </button>\n\n      {/* Y aquí la lista, cada vez que el estado cambie este componente se va a repintar y a actualizar la vista */}\n      <ul >\n        {list.map(el => (\n          <li key={list.votos}>\n            {el.name}   <br/> \n            {el.artista}  <br/>  \n             {el.votos }<br/>  \n             .\n\n          </li>\n        ))}\n      </ul>\n    </>\n  )\n}\n\nexport default Lista"]},"metadata":{},"sourceType":"module"}