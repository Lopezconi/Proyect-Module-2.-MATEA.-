{"ast":null,"code":"var _jsxFileName = \"/home/laboratorio1/Escritorio/maxi-app-mateify/src/components/listaprueba.js/lista.js\",\n    _s = $RefreshSig$();\n\n// import React, { useState, useEffect } from 'react'\n// // mi componente principal <Lista>\n// const Lista = () => {\n//     function handleAdd() {\n//         // add item\n//       }\n//   // guardo el estado list de valor inicial la lista que tengo\n//   const [list, setList] = useState([\n//     {\n//       id: 'one',\n//       name:'A las nueve',\n//       artista: 'NTVG',\n//       duracion: '3:24',\n//       votos: 4,\n//     },\n//     {\n//       id: 'two',\n//       name:'Maldicion',\n//       artista: 'Once tiros',\n//       duracion: '3:04',\n//       votos: 3,\n//     },\n//     {\n//       id: 'three',\n//       name: 'Cancion para uno',\n//       artista: 'La Vela Puerca',\n//       duracion: '2:53',\n//       votos: 2,\n//     },\n//     {\n//       id: 'four',\n//       name: 'Mi Revolucion',\n//       artista: 'Cuartro Pesos de Propina',\n//       duracion: '3:24',\n//       votos: 1,\n//     },\n//     {\n//       id: 'five',\n//       name: 'Lo mas simple de las cosas',\n//       artista: 'Hereford',\n//       duracion: '3:17',\n//       votos: 0,\n//     }\n//   ]);\n//   // utilizo useEffect para ejecutar este código sólo una vez\n//   useEffect(() => {\n//     // copio la lista con [...list] y la ordeno con sort()\n//     const sortedList = [...list].sort((b, a) => (a.votos > b.votos ? 1 : a.votos < b.votos ? -1 : 0))\n//     // actualizo el estado con la nueva lista ya ordenada\n//     setList(sortedList)\n//   }, [])\n//   // vuelco el contenido del estado `list`\n//   return (\n//     <>\n//       {/* Aquí pongo el botón para reordenar la lista */}\n//       <button\n//         onClick={() => {\n//           let newSortedList = [...list].sort((a, b) => (a.votos > b.votos ? 1 : a.votos < b.votos ? -1 : 0))\n//           // si la lista después de ordenarla tiene el mismo primer elemento, lo repito a la inversa\n//           // (claro que esto es ineficiente, lo suyo sería habilitar otro estado para guardar el tipo de ordenamiento que hemos hecho)\n//           if (newSortedList[0] === list[0])\n//             newSortedList = [...list].sort((b, a) => (a.votos > b.votos ? 1 : a.votos < b.votos ? -1 : 0))\n//           setList(newSortedList)\n//         }}\n//       >\n//         Ordenar\n//       </button>\n//       <button onClick={handleAdd}>\n//           Like\n//       </button>\n//       {/* Y aquí la lista, cada vez que el estado cambie este componente se va a repintar y a actualizar la vista */}\n//       <ul >\n//         {list.map(listas => ( \n//           <li key={listas.id}>\n//             {listas.name}   <br/> \n//             {listas.artista}  <br/>  \n//              {listas.votos} <br/>  \n//              <p></p>\n//              <p>{listas.id}</p>\n//           </li>\n//         ))}\n//       </ul>\n//     </>\n//   )\n// }\n// export default Lista\nimport React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Lista = () => {\n  _s();\n\n  const [list, setList] = React.useState(initialList);\n  const [name, setName] = React.useState('');\n\n  function handleChange(event) {\n    setName(event.target.value);\n  }\n\n  function handleAdd() {\n    const newList = list.concat({\n      name,\n      id: uuidv4()\n    });\n    setList(newList);\n    setName('');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(AddItem, {\n      name: name,\n      onChange: handleChange,\n      onAdd: handleAdd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      list: list\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Lista, \"sc3UCLYptgDKT5sZF4y78bVphe4=\");\n\n_c = Lista;\n\nconst AddItem = ({\n  name,\n  onChange,\n  onAdd\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"text\",\n    value: name,\n    onChange: onChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 7\n  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n    type: \"button\",\n    onClick: onAdd,\n    children: \"Add\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 7\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 129,\n  columnNumber: 5\n}, this);\n\n_c2 = AddItem;\n\nconst List = ({\n  list\n}) => /*#__PURE__*/_jsxDEV(\"ul\", {\n  children: list.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n    children: item.name\n  }, item.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 9\n  }, this))\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 138,\n  columnNumber: 5\n}, this);\n\n_c3 = List;\nexport default Lista;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Lista\");\n$RefreshReg$(_c2, \"AddItem\");\n$RefreshReg$(_c3, \"List\");","map":{"version":3,"sources":["/home/laboratorio1/Escritorio/maxi-app-mateify/src/components/listaprueba.js/lista.js"],"names":["React","v4","uuidv4","Lista","list","setList","useState","initialList","name","setName","handleChange","event","target","value","handleAdd","newList","concat","id","AddItem","onChange","onAdd","List","map","item"],"mappings":";;;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;;;AAEA,MAAMC,KAAK,GAAI,MAAM;AAAA;;AACjB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,KAAK,CAACM,QAAN,CAAeC,WAAf,CAAxB;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,KAAK,CAACM,QAAN,CAAe,EAAf,CAAxB;;AAEA,WAASI,YAAT,CAAsBC,KAAtB,EAA6B;AAC3BF,IAAAA,OAAO,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAP;AACD;;AAED,WAASC,SAAT,GAAqB;AACnB,UAAMC,OAAO,GAAGX,IAAI,CAACY,MAAL,CAAY;AAAER,MAAAA,IAAF;AAAQS,MAAAA,EAAE,EAAEf,MAAM;AAAlB,KAAZ,CAAhB;AAEAG,IAAAA,OAAO,CAACU,OAAD,CAAP;AAEAN,IAAAA,OAAO,CAAC,EAAD,CAAP;AACD;;AAED,sBACE;AAAA,4BACE,QAAC,OAAD;AACE,MAAA,IAAI,EAAED,IADR;AAEE,MAAA,QAAQ,EAAEE,YAFZ;AAGE,MAAA,KAAK,EAAEI;AAHT;AAAA;AAAA;AAAA;AAAA,YADF,eAOE,QAAC,IAAD;AAAM,MAAA,IAAI,EAAEV;AAAZ;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA3BH;;GAAMD,K;;KAAAA,K;;AA6BJ,MAAMe,OAAO,GAAG,CAAC;AAAEV,EAAAA,IAAF;AAAQW,EAAAA,QAAR;AAAkBC,EAAAA;AAAlB,CAAD,kBACd;AAAA,0BACE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,KAAK,EAAEZ,IAA1B;AAAgC,IAAA,QAAQ,EAAEW;AAA1C;AAAA;AAAA;AAAA;AAAA,UADF,eAEE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAEC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;;MAAMF,O;;AASN,MAAMG,IAAI,GAAG,CAAC;AAAEjB,EAAAA;AAAF,CAAD,kBACX;AAAA,YACGA,IAAI,CAACkB,GAAL,CAAUC,IAAD,iBACR;AAAA,cAAmBA,IAAI,CAACf;AAAxB,KAASe,IAAI,CAACN,EAAd;AAAA;AAAA;AAAA;AAAA,UADD;AADH;AAAA;AAAA;AAAA;AAAA,QADF;;MAAMI,I;AAQN,eAAelB,KAAf","sourcesContent":["// import React, { useState, useEffect } from 'react'\n\n// // mi componente principal <Lista>\n// const Lista = () => {\n//     function handleAdd() {\n//         // add item\n//       }\n     \n//   // guardo el estado list de valor inicial la lista que tengo\n//   const [list, setList] = useState([\n//     {\n//       id: 'one',\n//       name:'A las nueve',\n//       artista: 'NTVG',\n//       duracion: '3:24',\n//       votos: 4,\n//     },\n//     {\n//       id: 'two',\n//       name:'Maldicion',\n//       artista: 'Once tiros',\n//       duracion: '3:04',\n//       votos: 3,\n//     },\n//     {\n//       id: 'three',\n//       name: 'Cancion para uno',\n//       artista: 'La Vela Puerca',\n//       duracion: '2:53',\n//       votos: 2,\n//     },\n//     {\n//       id: 'four',\n//       name: 'Mi Revolucion',\n//       artista: 'Cuartro Pesos de Propina',\n//       duracion: '3:24',\n//       votos: 1,\n//     },\n//     {\n//       id: 'five',\n//       name: 'Lo mas simple de las cosas',\n//       artista: 'Hereford',\n//       duracion: '3:17',\n//       votos: 0,\n//     }\n    \n//   ]);\n\n//   // utilizo useEffect para ejecutar este código sólo una vez\n//   useEffect(() => {\n//     // copio la lista con [...list] y la ordeno con sort()\n//     const sortedList = [...list].sort((b, a) => (a.votos > b.votos ? 1 : a.votos < b.votos ? -1 : 0))\n//     // actualizo el estado con la nueva lista ya ordenada\n//     setList(sortedList)\n//   }, [])\n\n//   // vuelco el contenido del estado `list`\n//   return (\n//     <>\n//       {/* Aquí pongo el botón para reordenar la lista */}\n//       <button\n//         onClick={() => {\n//           let newSortedList = [...list].sort((a, b) => (a.votos > b.votos ? 1 : a.votos < b.votos ? -1 : 0))\n//           // si la lista después de ordenarla tiene el mismo primer elemento, lo repito a la inversa\n//           // (claro que esto es ineficiente, lo suyo sería habilitar otro estado para guardar el tipo de ordenamiento que hemos hecho)\n//           if (newSortedList[0] === list[0])\n//             newSortedList = [...list].sort((b, a) => (a.votos > b.votos ? 1 : a.votos < b.votos ? -1 : 0))\n//           setList(newSortedList)\n//         }}\n//       >\n//         Ordenar\n//       </button>\n\n//       <button onClick={handleAdd}>\n//           Like\n//       </button>\n\n//       {/* Y aquí la lista, cada vez que el estado cambie este componente se va a repintar y a actualizar la vista */}\n//       <ul >\n//         {list.map(listas => ( \n//           <li key={listas.id}>\n//             {listas.name}   <br/> \n//             {listas.artista}  <br/>  \n//              {listas.votos} <br/>  \n//              <p></p>\n//              <p>{listas.id}</p>\n\n//           </li>\n//         ))}\n//       </ul>\n//     </>\n//   )\n// }\n\n// export default Lista\nimport React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst Lista  = () => {\n    const [list, setList] = React.useState(initialList);\n    const [name, setName] = React.useState('');\n   \n    function handleChange(event) {\n      setName(event.target.value);\n    }\n   \n    function handleAdd() {\n      const newList = list.concat({ name, id: uuidv4() });\n   \n      setList(newList);\n   \n      setName('');\n    }\n   \n    return (\n      <div>\n        <AddItem\n          name={name}\n          onChange={handleChange}\n          onAdd={handleAdd}\n        />\n   \n        <List list={list} />\n      </div>\n    );\n  };\n   \n  const AddItem = ({ name, onChange, onAdd }) => (\n    <div>\n      <input type=\"text\" value={name} onChange={onChange} />\n      <button type=\"button\" onClick={onAdd}>\n        Add\n      </button>\n    </div>\n  );\n   \n  const List = ({ list }) => (\n    <ul>\n      {list.map((item) => (\n        <li key={item.id}>{item.name}</li>\n      ))}\n    </ul>\n  );\n\n  export default Lista"]},"metadata":{},"sourceType":"module"}